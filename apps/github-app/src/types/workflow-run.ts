import { z } from 'zod';

// GitHub Workflow Run Event Schema
export const WorkflowRunEventSchema = z.object({
  action: z.literal('completed'),
  workflow_run: z.object({
    id: z.number(),
    name: z.string(),
    node_id: z.string(),
    head_branch: z.string(),
    head_sha: z.string(),
    run_number: z.number(),
    event: z.string(),
    status: z.enum([
      'requested',
      'in_progress',
      'completed',
      'queued',
      'waiting',
    ]),
    conclusion: z
      .enum([
        'success',
        'failure',
        'cancelled',
        'skipped',
        'timed_out',
        'action_required',
      ])
      .nullable(),
    workflow_id: z.number(),
    url: z.string().url(),
    html_url: z.string().url(),
    pull_requests: z
      .array(
        z.object({
          url: z.string().url(),
          id: z.number(),
          number: z.number(),
          head: z.object({
            ref: z.string(),
            sha: z.string(),
            repo: z.object({
              id: z.number(),
              url: z.string().url(),
              name: z.string(),
            }),
          }),
          base: z.object({
            ref: z.string(),
            sha: z.string(),
            repo: z.object({
              id: z.number(),
              url: z.string().url(),
              name: z.string(),
            }),
          }),
        })
      )
      .optional(),
    created_at: z.string(),
    updated_at: z.string(),
    actor: z.object({
      login: z.string(),
      id: z.number(),
      node_id: z.string(),
      avatar_url: z.string().url(),
      gravatar_id: z.string(),
      url: z.string().url(),
      html_url: z.string().url(),
      followers_url: z.string().url(),
      following_url: z.string(),
      gists_url: z.string(),
      starred_url: z.string(),
      subscriptions_url: z.string().url(),
      organizations_url: z.string().url(),
      repos_url: z.string().url(),
      events_url: z.string(),
      received_events_url: z.string().url(),
      type: z.string(),
      site_admin: z.boolean(),
    }),
    run_attempt: z.number(),
    referenced_workflows: z
      .array(
        z.object({
          path: z.string(),
          sha: z.string(),
          ref: z.string(),
        })
      )
      .optional(),
    run_started_at: z.string(),
    triggering_actor: z.object({
      login: z.string(),
      id: z.number(),
      node_id: z.string(),
      avatar_url: z.string().url(),
      gravatar_id: z.string(),
      url: z.string().url(),
      html_url: z.string().url(),
      followers_url: z.string().url(),
      following_url: z.string(),
      gists_url: z.string(),
      starred_url: z.string(),
      subscriptions_url: z.string().url(),
      organizations_url: z.string().url(),
      repos_url: z.string().url(),
      events_url: z.string(),
      received_events_url: z.string().url(),
      type: z.string(),
      site_admin: z.boolean(),
    }),
    jobs_url: z.string().url(),
    logs_url: z.string().url(),
    check_suite_url: z.string().url(),
    artifacts_url: z.string().url(),
    cancel_url: z.string().url(),
    rerun_url: z.string().url(),
    previous_attempt_url: z.string().url().nullable(),
    workflow_url: z.string().url(),
    head_commit: z.object({
      id: z.string(),
      tree_id: z.string(),
      message: z.string(),
      timestamp: z.string(),
      author: z.object({
        name: z.string(),
        email: z.string(),
      }),
      committer: z.object({
        name: z.string(),
        email: z.string(),
      }),
    }),
    repository: z.object({
      id: z.number(),
      node_id: z.string(),
      name: z.string(),
      full_name: z.string(),
      private: z.boolean(),
      owner: z.object({
        login: z.string(),
        id: z.number(),
        node_id: z.string(),
        avatar_url: z.string().url(),
        gravatar_id: z.string(),
        url: z.string().url(),
        html_url: z.string().url(),
        followers_url: z.string().url(),
        following_url: z.string(),
        gists_url: z.string(),
        starred_url: z.string(),
        subscriptions_url: z.string().url(),
        organizations_url: z.string().url(),
        repos_url: z.string().url(),
        events_url: z.string(),
        received_events_url: z.string().url(),
        type: z.string(),
        site_admin: z.boolean(),
      }),
      html_url: z.string().url(),
      description: z.string().nullable(),
      fork: z.boolean(),
      url: z.string().url(),
      forks_url: z.string().url(),
      keys_url: z.string(),
      collaborators_url: z.string(),
      teams_url: z.string().url(),
      hooks_url: z.string().url(),
      issue_events_url: z.string().url(),
      events_url: z.string().url(),
      assignees_url: z.string().url(),
      branches_url: z.string().url(),
      tags_url: z.string().url(),
      blobs_url: z.string().url(),
      git_tags_url: z.string().url(),
      git_refs_url: z.string().url(),
      trees_url: z.string().url(),
      statuses_url: z.string().url(),
      languages_url: z.string().url(),
      stargazers_url: z.string().url(),
      contributors_url: z.string().url(),
      subscribers_url: z.string().url(),
      subscription_url: z.string().url(),
      commits_url: z.string().url(),
      git_commits_url: z.string().url(),
      comments_url: z.string().url(),
      issue_comment_url: z.string().url(),
      contents_url: z.string().url(),
      compare_url: z.string().url(),
      merges_url: z.string().url(),
      archive_url: z.string().url(),
      downloads_url: z.string().url(),
      issues_url: z.string().url(),
      pulls_url: z.string().url(),
      milestones_url: z.string().url(),
      notifications_url: z.string().url(),
      labels_url: z.string().url(),
      releases_url: z.string().url(),
      deployments_url: z.string().url(),
      created_at: z.string(),
      updated_at: z.string(),
      pushed_at: z.string(),
      git_url: z.string(),
      ssh_url: z.string(),
      clone_url: z.string().url(),
      svn_url: z.string().url(),
      homepage: z.string().nullable(),
      size: z.number(),
      stargazers_count: z.number(),
      watchers_count: z.number(),
      language: z.string().nullable(),
      has_issues: z.boolean(),
      has_projects: z.boolean(),
      has_downloads: z.boolean(),
      has_wiki: z.boolean(),
      has_pages: z.boolean(),
      has_discussions: z.boolean(),
      forks_count: z.number(),
      mirror_url: z.string().nullable(),
      archived: z.boolean(),
      disabled: z.boolean(),
      license: z
        .object({
          key: z.string(),
          name: z.string(),
          url: z.string().url(),
          spdx_id: z.string(),
          node_id: z.string(),
          html_url: z.string().url(),
        })
        .nullable(),
      allow_forking: z.boolean(),
      is_template: z.boolean(),
      web_commit_signoff_required: z.boolean(),
      topics: z.array(z.string()),
      visibility: z.string(),
      forks: z.number(),
      open_issues: z.number(),
      watchers: z.number(),
      default_branch: z.string(),
      allow_squash_merge: z.boolean(),
      allow_merge_commit: z.boolean(),
      allow_rebase_merge: z.boolean(),
      allow_auto_merge: z.boolean(),
      delete_branch_on_merge: z.boolean(),
      allow_update_branch: z.boolean(),
      use_squash_pr_title_as_default: z.boolean(),
      squash_merge_commit_message: z.string(),
      squash_merge_commit_title: z.string(),
      merge_commit_message: z.string(),
      merge_commit_title: z.string(),
      network_count: z.number(),
      subscribers_count: z.number(),
    }),
    head_repository: z.object({
      id: z.number(),
      node_id: z.string(),
      name: z.string(),
      full_name: z.string(),
      private: z.boolean(),
      owner: z.object({
        login: z.string(),
        id: z.number(),
        node_id: z.string(),
        avatar_url: z.string().url(),
        gravatar_id: z.string(),
        url: z.string().url(),
        html_url: z.string().url(),
        followers_url: z.string().url(),
        following_url: z.string(),
        gists_url: z.string(),
        starred_url: z.string(),
        subscriptions_url: z.string().url(),
        organizations_url: z.string().url(),
        repos_url: z.string().url(),
        events_url: z.string(),
        received_events_url: z.string().url(),
        type: z.string(),
        site_admin: z.boolean(),
      }),
      html_url: z.string().url(),
      description: z.string().nullable(),
      fork: z.boolean(),
      url: z.string().url(),
      forks_url: z.string().url(),
      keys_url: z.string(),
      collaborators_url: z.string(),
      teams_url: z.string().url(),
      hooks_url: z.string().url(),
      issue_events_url: z.string().url(),
      events_url: z.string().url(),
      assignees_url: z.string().url(),
      branches_url: z.string().url(),
      tags_url: z.string().url(),
      blobs_url: z.string().url(),
      git_tags_url: z.string().url(),
      git_refs_url: z.string().url(),
      trees_url: z.string().url(),
      statuses_url: z.string().url(),
      languages_url: z.string().url(),
      stargazers_url: z.string().url(),
      contributors_url: z.string().url(),
      subscribers_url: z.string().url(),
      subscription_url: z.string().url(),
      commits_url: z.string().url(),
      git_commits_url: z.string().url(),
      comments_url: z.string().url(),
      issue_comment_url: z.string().url(),
      contents_url: z.string().url(),
      compare_url: z.string().url(),
      merges_url: z.string().url(),
      archive_url: z.string().url(),
      downloads_url: z.string().url(),
      issues_url: z.string().url(),
      pulls_url: z.string().url(),
      milestones_url: z.string().url(),
      notifications_url: z.string().url(),
      labels_url: z.string().url(),
      releases_url: z.string().url(),
      deployments_url: z.string().url(),
      created_at: z.string(),
      updated_at: z.string(),
      pushed_at: z.string(),
      git_url: z.string(),
      ssh_url: z.string(),
      clone_url: z.string().url(),
      svn_url: z.string().url(),
      homepage: z.string().nullable(),
      size: z.number(),
      stargazers_count: z.number(),
      watchers_count: z.number(),
      language: z.string().nullable(),
      has_issues: z.boolean(),
      has_projects: z.boolean(),
      has_downloads: z.boolean(),
      has_wiki: z.boolean(),
      has_pages: z.boolean(),
      has_discussions: z.boolean(),
      forks_count: z.number(),
      mirror_url: z.string().nullable(),
      archived: z.boolean(),
      disabled: z.boolean(),
      license: z
        .object({
          key: z.string(),
          name: z.string(),
          url: z.string().url(),
          spdx_id: z.string(),
          node_id: z.string(),
          html_url: z.string().url(),
        })
        .nullable(),
      allow_forking: z.boolean(),
      is_template: z.boolean(),
      web_commit_signoff_required: z.boolean(),
      topics: z.array(z.string()),
      visibility: z.string(),
      forks: z.number(),
      open_issues: z.number(),
      watchers: z.number(),
      default_branch: z.string(),
      allow_squash_merge: z.boolean(),
      allow_merge_commit: z.boolean(),
      allow_rebase_merge: z.boolean(),
      allow_auto_merge: z.boolean(),
      delete_branch_on_merge: z.boolean(),
      allow_update_branch: z.boolean(),
      use_squash_pr_title_as_default: z.boolean(),
      squash_merge_commit_message: z.string(),
      squash_merge_commit_title: z.string(),
      merge_commit_message: z.string(),
      merge_commit_title: z.string(),
      network_count: z.number(),
      subscribers_count: z.number(),
    }),
  }),
  repository: z.object({
    id: z.number(),
    node_id: z.string(),
    name: z.string(),
    full_name: z.string(),
    private: z.boolean(),
    owner: z.object({
      login: z.string(),
      id: z.number(),
      node_id: z.string(),
      avatar_url: z.string().url(),
      gravatar_id: z.string(),
      url: z.string().url(),
      html_url: z.string().url(),
      followers_url: z.string().url(),
      following_url: z.string(),
      gists_url: z.string(),
      starred_url: z.string(),
      subscriptions_url: z.string().url(),
      organizations_url: z.string().url(),
      repos_url: z.string().url(),
      events_url: z.string(),
      received_events_url: z.string().url(),
      type: z.string(),
      site_admin: z.boolean(),
    }),
    html_url: z.string().url(),
    description: z.string().nullable(),
    fork: z.boolean(),
    url: z.string().url(),
    forks_url: z.string().url(),
    keys_url: z.string(),
    collaborators_url: z.string(),
    teams_url: z.string().url(),
    hooks_url: z.string().url(),
    issue_events_url: z.string().url(),
    events_url: z.string().url(),
    assignees_url: z.string().url(),
    branches_url: z.string().url(),
    tags_url: z.string().url(),
    blobs_url: z.string().url(),
    git_tags_url: z.string().url(),
    git_refs_url: z.string().url(),
    trees_url: z.string().url(),
    statuses_url: z.string().url(),
    languages_url: z.string().url(),
    stargazers_url: z.string().url(),
    contributors_url: z.string().url(),
    subscribers_url: z.string().url(),
    subscription_url: z.string().url(),
    commits_url: z.string().url(),
    git_commits_url: z.string().url(),
    comments_url: z.string().url(),
    issue_comment_url: z.string().url(),
    contents_url: z.string().url(),
    compare_url: z.string().url(),
    merges_url: z.string().url(),
    archive_url: z.string().url(),
    downloads_url: z.string().url(),
    issues_url: z.string().url(),
    pulls_url: z.string().url(),
    milestones_url: z.string().url(),
    notifications_url: z.string().url(),
    labels_url: z.string().url(),
    releases_url: z.string().url(),
    deployments_url: z.string().url(),
    created_at: z.string(),
    updated_at: z.string(),
    pushed_at: z.string(),
    git_url: z.string(),
    ssh_url: z.string(),
    clone_url: z.string().url(),
    svn_url: z.string().url(),
    homepage: z.string().nullable(),
    size: z.number(),
    stargazers_count: z.number(),
    watchers_count: z.number(),
    language: z.string().nullable(),
    has_issues: z.boolean(),
    has_projects: z.boolean(),
    has_downloads: z.boolean(),
    has_wiki: z.boolean(),
    has_pages: z.boolean(),
    has_discussions: z.boolean(),
    forks_count: z.number(),
    mirror_url: z.string().nullable(),
    archived: z.boolean(),
    disabled: z.boolean(),
    license: z
      .object({
        key: z.string(),
        name: z.string(),
        url: z.string().url(),
        spdx_id: z.string(),
        node_id: z.string(),
        html_url: z.string().url(),
      })
      .nullable(),
    allow_forking: z.boolean(),
    is_template: z.boolean(),
    web_commit_signoff_required: z.boolean(),
    topics: z.array(z.string()),
    visibility: z.string(),
    forks: z.number(),
    open_issues: z.number(),
    watchers: z.number(),
    default_branch: z.string(),
    allow_squash_merge: z.boolean(),
    allow_merge_commit: z.boolean(),
    allow_rebase_merge: z.boolean(),
    allow_auto_merge: z.boolean(),
    delete_branch_on_merge: z.boolean(),
    allow_update_branch: z.boolean(),
    use_squash_pr_title_as_default: z.boolean(),
    squash_merge_commit_message: z.string(),
    squash_merge_commit_title: z.string(),
    merge_commit_message: z.string(),
    merge_commit_title: z.string(),
    network_count: z.number(),
    subscribers_count: z.number(),
  }),
  organization: z
    .object({
      login: z.string(),
      id: z.number(),
      node_id: z.string(),
      url: z.string().url(),
      repos_url: z.string().url(),
      events_url: z.string().url(),
      hooks_url: z.string().url(),
      issues_url: z.string().url(),
      members_url: z.string().url(),
      public_members_url: z.string().url(),
      avatar_url: z.string().url(),
      description: z.string().nullable(),
      name: z.string().nullable(),
      company: z.string().nullable(),
      blog: z.string().nullable(),
      location: z.string().nullable(),
      email: z.string().nullable(),
      twitter_username: z.string().nullable(),
      is_verified: z.boolean(),
      has_organization_projects: z.boolean(),
      has_repository_projects: z.boolean(),
      public_repos: z.number(),
      public_gists: z.number(),
      followers: z.number(),
      following: z.number(),
      html_url: z.string().url(),
      created_at: z.string(),
      type: z.string(),
      total_private_repos: z.number(),
      owned_private_repos: z.number(),
      private_gists: z.number(),
      disk_usage: z.number(),
      collaborators: z.number(),
      billing_email: z.string().nullable(),
      plan: z.object({
        name: z.string(),
        space: z.number(),
        private_repos: z.number(),
        filled_seats: z.number(),
        seats: z.number(),
      }),
      default_repository_permission: z.string().nullable(),
      members_can_create_repositories: z.boolean().nullable(),
      two_factor_requirement: z.string().nullable(),
      members_allowed_repository_creation_type: z.string().nullable(),
      members_can_create_public_repositories: z.boolean().nullable(),
      members_can_create_private_repositories: z.boolean().nullable(),
      members_can_create_internal_repositories: z.boolean().nullable(),
      members_can_create_pages: z.boolean().nullable(),
      members_can_create_public_pages: z.boolean().nullable(),
      members_can_create_private_pages: z.boolean().nullable(),
      members_can_fork_private_repositories: z.boolean().nullable(),
      web_commit_signoff_required: z.boolean().nullable(),
      members_can_delete_issues: z.boolean().nullable(),
      members_can_delete_repositories: z.boolean().nullable(),
      advanced_security_enabled_for_new_repositories: z.boolean().nullable(),
      dependabot_alerts_enabled_for_new_repositories: z.boolean().nullable(),
      dependabot_security_updates_enabled_for_new_repositories: z
        .boolean()
        .nullable(),
      dependency_graph_enabled_for_new_repositories: z.boolean().nullable(),
      secret_scanning_enabled_for_new_repositories: z.boolean().nullable(),
      secret_scanning_push_protection_enabled_for_new_repositories: z
        .boolean()
        .nullable(),
      secret_scanning_push_protection_custom_link_enabled: z
        .boolean()
        .nullable(),
      secret_scanning_push_protection_custom_link: z.string().nullable(),
      secret_scanning_validity_checks_enabled: z.boolean().nullable(),
      packages_enabled_for_new_repositories: z.boolean().nullable(),
      secret_scanning_for_new_repositories: z.boolean().nullable(),
      secret_scanning_push_protection_for_new_repositories: z
        .boolean()
        .nullable(),
      merge_queue_enabled_for_new_repositories: z.boolean().nullable(),
      projects_enabled_for_new_repositories: z.boolean().nullable(),
      projects_enabled_for_new_private_repositories: z.boolean().nullable(),
      projects_enabled_for_new_public_repositories: z.boolean().nullable(),
      projects_enabled_for_new_internal_repositories: z.boolean().nullable(),
    })
    .optional(),
  sender: z.object({
    login: z.string(),
    id: z.number(),
    node_id: z.string(),
    avatar_url: z.string().url(),
    gravatar_id: z.string(),
    url: z.string().url(),
    html_url: z.string().url(),
    followers_url: z.string().url(),
    following_url: z.string(),
    gists_url: z.string(),
    starred_url: z.string(),
    subscriptions_url: z.string().url(),
    organizations_url: z.string().url(),
    repos_url: z.string().url(),
    events_url: z.string(),
    received_events_url: z.string().url(),
    type: z.string(),
    site_admin: z.boolean(),
  }),
  installation: z.object({
    id: z.number(),
    account: z.object({
      login: z.string(),
      id: z.number(),
      node_id: z.string(),
      avatar_url: z.string().url(),
      gravatar_id: z.string(),
      url: z.string().url(),
      html_url: z.string().url(),
      followers_url: z.string().url(),
      following_url: z.string(),
      gists_url: z.string(),
      starred_url: z.string(),
      subscriptions_url: z.string().url(),
      organizations_url: z.string().url(),
      repos_url: z.string().url(),
      events_url: z.string(),
      received_events_url: z.string().url(),
      type: z.string(),
      site_admin: z.boolean(),
    }),
    repository_selection: z.string(),
    access_tokens_url: z.string().url(),
    repositories_url: z.string().url(),
    html_url: z.string().url(),
    app_id: z.number(),
    app_slug: z.string(),
    target_id: z.number(),
    target_type: z.string(),
    permissions: z.record(z.string()),
    events: z.array(z.string()),
    created_at: z.string(),
    updated_at: z.string(),
    single_file_name: z.string().nullable(),
    has_multiple_single_files: z.boolean().optional(),
    single_file_paths: z.array(z.string()).optional(),
    suspended_by: z
      .object({
        login: z.string(),
        id: z.number(),
        node_id: z.string(),
        avatar_url: z.string().url(),
        gravatar_id: z.string(),
        url: z.string().url(),
        html_url: z.string().url(),
        followers_url: z.string().url(),
        following_url: z.string(),
        gists_url: z.string(),
        starred_url: z.string(),
        subscriptions_url: z.string().url(),
        organizations_url: z.string().url(),
        repos_url: z.string().url(),
        events_url: z.string(),
        received_events_url: z.string().url(),
        type: z.string(),
        site_admin: z.boolean(),
      })
      .nullable(),
    suspended_at: z.string().nullable(),
  }),
});

// TypeScript types derived from the schema
export type WorkflowRunEvent = z.infer<typeof WorkflowRunEventSchema>;

// Specific types for key components
export type WorkflowRun = WorkflowRunEvent['workflow_run'];
export type Repository = WorkflowRunEvent['repository'];
export type Actor = WorkflowRunEvent['sender'];
export type Installation = WorkflowRunEvent['installation'];

// Helper types for common patterns
export type WorkflowConclusion = WorkflowRun['conclusion'];
export type WorkflowStatus = WorkflowRun['status'];

// Validation function
export const validateWorkflowRunEvent = (data: unknown): WorkflowRunEvent => {
  return WorkflowRunEventSchema.parse(data);
};

// Type guard function
export const isWorkflowRunEvent = (data: unknown): data is WorkflowRunEvent => {
  return WorkflowRunEventSchema.safeParse(data).success;
};

// Helper function to check if workflow run failed
export const isWorkflowRunFailed = (event: WorkflowRunEvent): boolean => {
  return (
    event.action === 'completed' && event.workflow_run.conclusion === 'failure'
  );
};

// Helper function to get unique identifier for deduplication
export const getWorkflowRunId = (event: WorkflowRunEvent): string => {
  return `${event.repository.full_name}:${event.workflow_run.head_sha}:${event.workflow_run.id}`;
};
